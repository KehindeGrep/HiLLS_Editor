/**
 */
package hills.provider;

import hills.util.HillsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HillsItemProviderAdapterFactory extends HillsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HillsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.HSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HSpecificationItemProvider hSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.HSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHSpecificationAdapter() {
		if (hSpecificationItemProvider == null) {
			hSpecificationItemProvider = new HSpecificationItemProvider(this);
		}

		return hSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.HSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HSystemItemProvider hSystemItemProvider;

	/**
	 * This creates an adapter for a {@link hills.HSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHSystemAdapter() {
		if (hSystemItemProvider == null) {
			hSystemItemProvider = new HSystemItemProvider(this);
		}

		return hSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.HClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HClassItemProvider hClassItemProvider;

	/**
	 * This creates an adapter for a {@link hills.HClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHClassAdapter() {
		if (hClassItemProvider == null) {
			hClassItemProvider = new HClassItemProvider(this);
		}

		return hClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.PortDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortDeclarationItemProvider portDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.PortDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortDeclarationAdapter() {
		if (portDeclarationItemProvider == null) {
			portDeclarationItemProvider = new PortDeclarationItemProvider(this);
		}

		return portDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.GenericNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericNodeItemProvider genericNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hills.GenericNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericNodeAdapter() {
		if (genericNodeItemProvider == null) {
			genericNodeItemProvider = new GenericNodeItemProvider(this);
		}

		return genericNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Composition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionItemProvider compositionItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Composition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionAdapter() {
		if (compositionItemProvider == null) {
			compositionItemProvider = new CompositionItemProvider(this);
		}

		return compositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Aggregation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationItemProvider aggregationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Aggregation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationAdapter() {
		if (aggregationItemProvider == null) {
			aggregationItemProvider = new AggregationItemProvider(this);
		}

		return aggregationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Reference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Reference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Declaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarationItemProvider declarationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Declaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarationAdapter() {
		if (declarationItemProvider == null) {
			declarationItemProvider = new DeclarationItemProvider(this);
		}

		return declarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.FiniteConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FiniteConfigurationItemProvider finiteConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.FiniteConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFiniteConfigurationAdapter() {
		if (finiteConfigurationItemProvider == null) {
			finiteConfigurationItemProvider = new FiniteConfigurationItemProvider(this);
		}

		return finiteConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.InitialConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialConfigurationItemProvider initialConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.InitialConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialConfigurationAdapter() {
		if (initialConfigurationItemProvider == null) {
			initialConfigurationItemProvider = new InitialConfigurationItemProvider(this);
		}

		return initialConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.PassiveConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PassiveConfigurationItemProvider passiveConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.PassiveConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPassiveConfigurationAdapter() {
		if (passiveConfigurationItemProvider == null) {
			passiveConfigurationItemProvider = new PassiveConfigurationItemProvider(this);
		}

		return passiveConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.TransientConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransientConfigurationItemProvider transientConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.TransientConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransientConfigurationAdapter() {
		if (transientConfigurationItemProvider == null) {
			transientConfigurationItemProvider = new TransientConfigurationItemProvider(this);
		}

		return transientConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.ConfluentTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfluentTransitionItemProvider confluentTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link hills.ConfluentTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfluentTransitionAdapter() {
		if (confluentTransitionItemProvider == null) {
			confluentTransitionItemProvider = new ConfluentTransitionItemProvider(this);
		}

		return confluentTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.InternalTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalTransitionItemProvider internalTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link hills.InternalTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalTransitionAdapter() {
		if (internalTransitionItemProvider == null) {
			internalTransitionItemProvider = new InternalTransitionItemProvider(this);
		}

		return internalTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.ExternalTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalTransitionItemProvider externalTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link hills.ExternalTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalTransitionAdapter() {
		if (externalTransitionItemProvider == null) {
			externalTransitionItemProvider = new ExternalTransitionItemProvider(this);
		}

		return externalTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.SojournTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SojournTimeItemProvider sojournTimeItemProvider;

	/**
	 * This creates an adapter for a {@link hills.SojournTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSojournTimeAdapter() {
		if (sojournTimeItemProvider == null) {
			sojournTimeItemProvider = new SojournTimeItemProvider(this);
		}

		return sojournTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.TestNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestNodeItemProvider testNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hills.TestNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestNodeAdapter() {
		if (testNodeItemProvider == null) {
			testNodeItemProvider = new TestNodeItemProvider(this);
		}

		return testNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.HRequirementSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HRequirementSpecificationItemProvider hRequirementSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.HRequirementSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHRequirementSpecificationAdapter() {
		if (hRequirementSpecificationItemProvider == null) {
			hRequirementSpecificationItemProvider = new HRequirementSpecificationItemProvider(this);
		}

		return hRequirementSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.BExistence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BExistenceItemProvider bExistenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.BExistence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBExistenceAdapter() {
		if (bExistenceItemProvider == null) {
			bExistenceItemProvider = new BExistenceItemProvider(this);
		}

		return bExistenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.UExistence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UExistenceItemProvider uExistenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.UExistence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUExistenceAdapter() {
		if (uExistenceItemProvider == null) {
			uExistenceItemProvider = new UExistenceItemProvider(this);
		}

		return uExistenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.EExistence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EExistenceItemProvider eExistenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.EExistence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEExistenceAdapter() {
		if (eExistenceItemProvider == null) {
			eExistenceItemProvider = new EExistenceItemProvider(this);
		}

		return eExistenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.CAbsence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAbsenceItemProvider cAbsenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.CAbsence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAbsenceAdapter() {
		if (cAbsenceItemProvider == null) {
			cAbsenceItemProvider = new CAbsenceItemProvider(this);
		}

		return cAbsenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.TLProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLPropertyItemProvider tlPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link hills.TLProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLPropertyAdapter() {
		if (tlPropertyItemProvider == null) {
			tlPropertyItemProvider = new TLPropertyItemProvider(this);
		}

		return tlPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.ResponseChain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseChainItemProvider responseChainItemProvider;

	/**
	 * This creates an adapter for a {@link hills.ResponseChain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseChainAdapter() {
		if (responseChainItemProvider == null) {
			responseChainItemProvider = new ResponseChainItemProvider(this);
		}

		return responseChainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.PrecedenceChain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrecedenceChainItemProvider precedenceChainItemProvider;

	/**
	 * This creates an adapter for a {@link hills.PrecedenceChain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrecedenceChainAdapter() {
		if (precedenceChainItemProvider == null) {
			precedenceChainItemProvider = new PrecedenceChainItemProvider(this);
		}

		return precedenceChainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.BoundedExistence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundedExistenceItemProvider boundedExistenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.BoundedExistence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundedExistenceAdapter() {
		if (boundedExistenceItemProvider == null) {
			boundedExistenceItemProvider = new BoundedExistenceItemProvider(this);
		}

		return boundedExistenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.PropertyPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyPatternItemProvider propertyPatternItemProvider;

	/**
	 * This creates an adapter for a {@link hills.PropertyPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyPatternAdapter() {
		if (propertyPatternItemProvider == null) {
			propertyPatternItemProvider = new PropertyPatternItemProvider(this);
		}

		return propertyPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.MultiTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiTriggerItemProvider multiTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link hills.MultiTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiTriggerAdapter() {
		if (multiTriggerItemProvider == null) {
			multiTriggerItemProvider = new MultiTriggerItemProvider(this);
		}

		return multiTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.SingleTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleTriggerItemProvider singleTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link hills.SingleTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleTriggerAdapter() {
		if (singleTriggerItemProvider == null) {
			singleTriggerItemProvider = new SingleTriggerItemProvider(this);
		}

		return singleTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.MultiCause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiCauseItemProvider multiCauseItemProvider;

	/**
	 * This creates an adapter for a {@link hills.MultiCause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiCauseAdapter() {
		if (multiCauseItemProvider == null) {
			multiCauseItemProvider = new MultiCauseItemProvider(this);
		}

		return multiCauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Response} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseItemProvider responseItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Response}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseAdapter() {
		if (responseItemProvider == null) {
			responseItemProvider = new ResponseItemProvider(this);
		}

		return responseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Universality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniversalityItemProvider universalityItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Universality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniversalityAdapter() {
		if (universalityItemProvider == null) {
			universalityItemProvider = new UniversalityItemProvider(this);
		}

		return universalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Precedence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrecedenceItemProvider precedenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Precedence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrecedenceAdapter() {
		if (precedenceItemProvider == null) {
			precedenceItemProvider = new PrecedenceItemProvider(this);
		}

		return precedenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.SingleCause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleCauseItemProvider singleCauseItemProvider;

	/**
	 * This creates an adapter for a {@link hills.SingleCause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleCauseAdapter() {
		if (singleCauseItemProvider == null) {
			singleCauseItemProvider = new SingleCauseItemProvider(this);
		}

		return singleCauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Existence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistenceItemProvider existenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Existence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistenceAdapter() {
		if (existenceItemProvider == null) {
			existenceItemProvider = new ExistenceItemProvider(this);
		}

		return existenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Absence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbsenceItemProvider absenceItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Absence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbsenceAdapter() {
		if (absenceItemProvider == null) {
			absenceItemProvider = new AbsenceItemProvider(this);
		}

		return absenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Proposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropositionItemProvider propositionItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Proposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropositionAdapter() {
		if (propositionItemProvider == null) {
			propositionItemProvider = new PropositionItemProvider(this);
		}

		return propositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Predicat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredicatItemProvider predicatItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Predicat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredicatAdapter() {
		if (predicatItemProvider == null) {
			predicatItemProvider = new PredicatItemProvider(this);
		}

		return predicatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Before} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeforeItemProvider beforeItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Before}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeforeAdapter() {
		if (beforeItemProvider == null) {
			beforeItemProvider = new BeforeItemProvider(this);
		}

		return beforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.After} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterItemProvider afterItemProvider;

	/**
	 * This creates an adapter for a {@link hills.After}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterAdapter() {
		if (afterItemProvider == null) {
			afterItemProvider = new AfterItemProvider(this);
		}

		return afterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Global} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalItemProvider globalItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Global}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalAdapter() {
		if (globalItemProvider == null) {
			globalItemProvider = new GlobalItemProvider(this);
		}

		return globalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.AfterUntil} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterUntilItemProvider afterUntilItemProvider;

	/**
	 * This creates an adapter for a {@link hills.AfterUntil}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterUntilAdapter() {
		if (afterUntilItemProvider == null) {
			afterUntilItemProvider = new AfterUntilItemProvider(this);
		}

		return afterUntilItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Scope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeItemProvider scopeItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Scope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeAdapter() {
		if (scopeItemProvider == null) {
			scopeItemProvider = new ScopeItemProvider(this);
		}

		return scopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Between} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BetweenItemProvider betweenItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Between}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBetweenAdapter() {
		if (betweenItemProvider == null) {
			betweenItemProvider = new BetweenItemProvider(this);
		}

		return betweenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Implication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationItemProvider implicationItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Implication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicationAdapter() {
		if (implicationItemProvider == null) {
			implicationItemProvider = new ImplicationItemProvider(this);
		}

		return implicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Next} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NextItemProvider nextItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Next}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNextAdapter() {
		if (nextItemProvider == null) {
			nextItemProvider = new NextItemProvider(this);
		}

		return nextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hills.Concurrency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcurrencyItemProvider concurrencyItemProvider;

	/**
	 * This creates an adapter for a {@link hills.Concurrency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcurrencyAdapter() {
		if (concurrencyItemProvider == null) {
			concurrencyItemProvider = new ConcurrencyItemProvider(this);
		}

		return concurrencyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (hSpecificationItemProvider != null) hSpecificationItemProvider.dispose();
		if (hSystemItemProvider != null) hSystemItemProvider.dispose();
		if (hClassItemProvider != null) hClassItemProvider.dispose();
		if (portItemProvider != null) portItemProvider.dispose();
		if (portDeclarationItemProvider != null) portDeclarationItemProvider.dispose();
		if (genericNodeItemProvider != null) genericNodeItemProvider.dispose();
		if (compositionItemProvider != null) compositionItemProvider.dispose();
		if (aggregationItemProvider != null) aggregationItemProvider.dispose();
		if (referenceItemProvider != null) referenceItemProvider.dispose();
		if (declarationItemProvider != null) declarationItemProvider.dispose();
		if (finiteConfigurationItemProvider != null) finiteConfigurationItemProvider.dispose();
		if (initialConfigurationItemProvider != null) initialConfigurationItemProvider.dispose();
		if (passiveConfigurationItemProvider != null) passiveConfigurationItemProvider.dispose();
		if (transientConfigurationItemProvider != null) transientConfigurationItemProvider.dispose();
		if (confluentTransitionItemProvider != null) confluentTransitionItemProvider.dispose();
		if (internalTransitionItemProvider != null) internalTransitionItemProvider.dispose();
		if (externalTransitionItemProvider != null) externalTransitionItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (sojournTimeItemProvider != null) sojournTimeItemProvider.dispose();
		if (testNodeItemProvider != null) testNodeItemProvider.dispose();
		if (hRequirementSpecificationItemProvider != null) hRequirementSpecificationItemProvider.dispose();
		if (bExistenceItemProvider != null) bExistenceItemProvider.dispose();
		if (uExistenceItemProvider != null) uExistenceItemProvider.dispose();
		if (eExistenceItemProvider != null) eExistenceItemProvider.dispose();
		if (cAbsenceItemProvider != null) cAbsenceItemProvider.dispose();
		if (tlPropertyItemProvider != null) tlPropertyItemProvider.dispose();
		if (responseChainItemProvider != null) responseChainItemProvider.dispose();
		if (precedenceChainItemProvider != null) precedenceChainItemProvider.dispose();
		if (boundedExistenceItemProvider != null) boundedExistenceItemProvider.dispose();
		if (propertyPatternItemProvider != null) propertyPatternItemProvider.dispose();
		if (multiTriggerItemProvider != null) multiTriggerItemProvider.dispose();
		if (singleTriggerItemProvider != null) singleTriggerItemProvider.dispose();
		if (multiCauseItemProvider != null) multiCauseItemProvider.dispose();
		if (responseItemProvider != null) responseItemProvider.dispose();
		if (universalityItemProvider != null) universalityItemProvider.dispose();
		if (precedenceItemProvider != null) precedenceItemProvider.dispose();
		if (singleCauseItemProvider != null) singleCauseItemProvider.dispose();
		if (existenceItemProvider != null) existenceItemProvider.dispose();
		if (absenceItemProvider != null) absenceItemProvider.dispose();
		if (propositionItemProvider != null) propositionItemProvider.dispose();
		if (predicatItemProvider != null) predicatItemProvider.dispose();
		if (beforeItemProvider != null) beforeItemProvider.dispose();
		if (afterItemProvider != null) afterItemProvider.dispose();
		if (globalItemProvider != null) globalItemProvider.dispose();
		if (afterUntilItemProvider != null) afterUntilItemProvider.dispose();
		if (scopeItemProvider != null) scopeItemProvider.dispose();
		if (betweenItemProvider != null) betweenItemProvider.dispose();
		if (implicationItemProvider != null) implicationItemProvider.dispose();
		if (nextItemProvider != null) nextItemProvider.dispose();
		if (concurrencyItemProvider != null) concurrencyItemProvider.dispose();
	}

}
